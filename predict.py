# -*- coding: utf-8 -*-
"""predict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XP8FsFGdh0vX1mKNB6NG9J92hqVHEqAm
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('mixed_data_set_with_quality.csv')
# df = pd.read_csv('aluminum_rod_properties.csv')

feature_cols = ['casting_temperature', 'cooling_temp', 'casting_speed', 'entry_temp',
                'emulsion_temp', 'emulsion_pressure', 'emulsion_concentration', 'quench_pressure']
target_col = 'quality'

RF = RandomForestClassifier(n_estimators=20, random_state=0)
RF.fit(df[feature_cols], df[target_col])

def calculate_cooling_water_temp(casting_temp):
    return max(20, min(0.5 * casting_temp + 2, 35))

def calculate_casting_speed(casting_temp):
    return max(6, min(0.8 * casting_temp + 1000, 12))

def calculate_entry_temp(casting_temp):
    return max(400, min(450, 500))

def calculate_emulsion_temp(casting_temp):
    return max(40, min(50, 60))

def calculate_emulsion_pressure(casting_temp):
    return max(1, min(2, 3))

def calculate_emulsion_concentration(casting_temp):
    return max(2, min(3, 5))

def calculate_quench_pressure(casting_temp):
    return max(1, min(1.5, 2))


def calculate_chemical_composition(casting_temp):
    return 0.01 * casting_temp + 0.5

def calculate_ambient_humidity(casting_temp):
    return 0.2 * casting_temp + 60

def calculate_energy_consumption(casting_temp):
    return 0.3 * casting_temp + 50

def calculate_grain_size(casting_temp):
    return 0.005 * casting_temp + 0.1

def calculate_uts(casting_temp):
    return 0.7 * casting_temp + 200

def calculate_elongation(casting_temp):
    return 0.1 * casting_temp + 5

def calculate_conductivity(casting_temp):
    return 0.4 * casting_temp + 60


def suggest_adjustments(parameters, min_range, max_range):
    suggestions = {}
    function_mapping = {
        'cooling_temp': 'calculate_cooling_water_temp',
        'casting_speed': 'calculate_casting_speed',
        'entry_temp': 'calculate_entry_temp',
        'emulsion_temp': 'calculate_emulsion_temp',
        'emulsion_pressure': 'calculate_emulsion_pressure',
        'emulsion_concentration': 'calculate_emulsion_concentration',
        'quench_pressure': 'calculate_quench_pressure',
    }

    for param, value in parameters.items():
        if param == 'casting_temperature':
            continue

        func_name = function_mapping.get(param)
        if func_name:
            optimal_value = globals()[func_name](parameters['casting_temperature'])

            optimal_value = max(min_range[param], min(optimal_value, max_range[param]))
            percentage_change = ((optimal_value - value) / value) * 100
            suggestions[param] = {
                'optimal_value': optimal_value,
                'percentage_change': percentage_change
            }
    return suggestions


def predict_quality(casting_temperature, cooling_temp, casting_speed, entry_temp,
                    emulsion_temp, emulsion_pressure, emulsion_concentration, quench_pressure):
    parameters = {
        'casting_temperature': casting_temperature,
        'cooling_temp': cooling_temp,
        'casting_speed': casting_speed,
        'entry_temp': entry_temp,
        'emulsion_temp': emulsion_temp,
        'emulsion_pressure': emulsion_pressure,
        'emulsion_concentration': emulsion_concentration,
        'quench_pressure': quench_pressure
    }

    input_df = pd.DataFrame(parameters, index=[0])

    scaler = StandardScaler()
    input_scaled = scaler.fit_transform(input_df)

    quality_pred = RF.predict(input_scaled)[0]

    print(f"Predicted quality: {quality_pred}")


    if quality_pred != 'high':
        print("To improve the quality, consider adjusting the following parameters:")
        suggestions = suggest_adjustments(parameters, min_range, max_range)
        for param, suggestion in suggestions.items():
            print(f"  - {param}: adjust to {suggestion['optimal_value']:.2f} (Change: {suggestion['percentage_change']:.2f}%)")
    else:
        print("The predicted quality is high.")

min_range = {'casting_temperature': 680, 'cooling_temp': 20, 'casting_speed': 6, 'entry_temp': 400,
             'emulsion_temp': 40, 'emulsion_pressure': 1, 'emulsion_concentration': 2, 'quench_pressure': 1}
max_range = {'casting_temperature': 750, 'cooling_temp': 35, 'casting_speed': 12, 'entry_temp': 500,
             'emulsion_temp': 60, 'emulsion_pressure': 3, 'emulsion_concentration': 5, 'quench_pressure': 2}


casting_temperature = float(input("Enter casting temperature (680-750째C): "))
cooling_temp = float(input("Enter cooling temperature (20-35째C): "))
casting_speed = float(input("Enter casting speed (6-12 m/min): "))
entry_temp = float(input("Enter entry temperature (400-500째C): "))
emulsion_temp = float(input("Enter emulsion temperature (40-60째C): "))
emulsion_pressure = float(input("Enter emulsion pressure (1-3 bar): "))
emulsion_concentration = float(input("Enter emulsion concentration (2-5%): "))
quench_pressure = float(input("Enter quench pressure (1-2 bar): "))

predict_quality(casting_temperature, cooling_temp, casting_speed, entry_temp, emulsion_temp,
                emulsion_pressure, emulsion_concentration, quench_pressure)